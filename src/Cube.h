/*
 * This file is part of DynSuite
 *
 * DynSuite is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * DynSuite is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHNATABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with DynSuite. If not, see <http://www.gnu.org/licenses/>.

 * Copyright 2014-2018 Lily Carlson
 */

#ifndef CUBE_H_
#define CUBE_H_

#include <string>
#include <vector>

#include "AtomicStructure.h"
#include "Vector3.h"
#include "PackmolShape.h"

using std::string;
using std::vector;

/**
 * This class represents the solvent container as generated by Packmol
 *
 */
class Cube : public PackmolShape  {
public:
	/**
	 * Builds a Packmol shape given a string naming the shape and vector of constraints 
	 * TODO: params
	 */
	Cube(vector<double> constraints);

	/**
	 * Default Destructor
	 */
	virtual ~Cube();


	/**
	 * Detects if a single molecule is outside of constraints and corrects
	 * the velocity appropriately
	 * TODO: params
	 */ 
	virtual bool edgeDetect(AtomicStructure& molecule, vector<Vector3> delta, double timestep);


protected:

	/**
	 */
	vector<double> constraints;
private:
	double xmin;
	double ymin;
	double zmin;
	double d;
	size_t expectedConstraints = 4;
	void debug_abc(double a, double b, double c);
	void reflection(AtomicStructure& molecule, Vector3 broadcast_value, double t_remaining);


};

#endif /* CUBE_H_ */
